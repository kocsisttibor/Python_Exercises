"""
http://www.practicepython.org/exercise/2017/01/02/31-guess-letters.html

This exercise is Part 2 of 3 of the Hangman exercise series. The other exercises are: Part 1 and Part 3.

Let’s continue building Hangman. In the game of Hangman, a clue word is given by the program that the player has to guess, letter by letter. The player guesses one letter at a time until the entire word has been guessed. (In the actual game, the player can only guess 6 letters incorrectly before losing).

Let’s say the word the player has to guess is “EVAPORATE”. For this exercise, write the logic that asks a player to guess a letter and displays letters in the clue word that were guessed correctly. For now, let the player guess an infinite number of times until they get the entire word. As a bonus, keep track of the letters the player guessed and display a different message if the player tries to guess that letter again. Remember to stop the game when all the letters have been guessed correctly! Don’t worry about choosing a word randomly or keeping track of the number of guesses the player has remaining - we will deal with those in a future exercise.
"""

import random

def random_word ():
    with open("C:/E/Visual Studio Code/Practice Python/sowpods.txt") as f:
        words = list(f)
    return(random.choice(words).strip())

def game():
    word = random_word()
    letters_guessed = []
    word = list(word)
    hang = list("_" * len(word))
    
    print("Welcome to Hangman! \nAnytime you want to exit please enter: exit \nHere is your word to guess: \n")
    print(" ".join(hang))
    print(word)
    letter = input("\nPlease enter a letter:")
    if letter == "exit":
        break

    while "_" in hang:
        if letter == "exit":
            break
        if letter in letters_guessed:
            print("\nThis letter is guessed before.")
            letter = input("\nPlease enter a letter:")
        elif letter in word:
            if letter not in hang:
                print("\nGreat guess! Here is your word:\n")
            hang[word.index(letter)] = letter
            word[word.index(letter)] = "_"
        else:
            if letter not in hang:
                print("\nThis word is not in the word.")
            print(" ".join(hang))
            letters_guessed.append(letter)
            letter = input("\nEnter your next guess:")

game()
